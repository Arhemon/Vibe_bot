import os
import time
import requests
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import logging
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AutoVisaChecker:
    def __init__(self):
        self.site_url = "https://services.vfsglobal.by/"
        self.recipient_email = "gannibal231@gmail.com"
        
        # Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
        self.smtp_port = int(os.getenv('SMTP_PORT', '587'))
        self.sender_email = os.getenv('SENDER_EMAIL')
        self.sender_password = os.getenv('SENDER_PASSWORD')
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (3 –º–∏–Ω—É—Ç—ã —á—Ç–æ–±—ã —Ç–æ–∫–µ–Ω—ã –Ω–µ –∏—Å—Ç–µ–∫–∞–ª–∏)
        self.check_interval = int(os.getenv('CHECK_INTERVAL', '180'))
        
        self.notification_sent = False
        self.driver = None
    
    def init_browser(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±—Ä–∞—É–∑–µ—Ä —Å –æ–±—Ö–æ–¥–æ–º Cloudflare"""
        try:
            options = uc.ChromeOptions()
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-blink-features=AutomationControlled')
            options.add_argument('--window-size=1920,1080')
            
            # undetected-chromedriver –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ö–æ–¥–∏—Ç Cloudflare!
            self.driver = uc.Chrome(
                options=options,
                headless=True,
                use_subprocess=False,
                version_main=141  # –í–µ—Ä—Å–∏—è Chrome
            )
            
            logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤ (undetected mode)")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False
    
    def get_fresh_tokens_and_check_slots(self):
        """–ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã –ò —Å—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ª–æ—Ç—ã"""
        try:
            logger.info("üîÑ –û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤...")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä
            if self.driver:
                try:
                    self.driver.quit()
                except:
                    pass
            
            if not self.init_browser():
                return []
            
            logger.info("üåê –ó–∞—Ö–æ–∂—É –Ω–∞ —Å–∞–π—Ç...")
            self.driver.get(self.site_url)
            time.sleep(6)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º popup
            try:
                btn = WebDriverWait(self.driver, 5).until(
                    EC.element_to_be_clickable((By.ID, "onetrust-accept-btn-handler"))
                )
                btn.click()
                time.sleep(2)
            except:
                pass
            
            # –ñ–¥–µ–º Angular
            time.sleep(4)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É - –ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤
            logger.info("üìù –ó–∞–ø–æ–ª–Ω—è—é —Ñ–æ—Ä–º—É...")
            wait = WebDriverWait(self.driver, 30)
            
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.info("DEBUG: –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")
                page_source = self.driver.page_source
                if 'mat-select' in page_source:
                    logger.info("DEBUG: mat-select —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –≤ HTML")
                else:
                    logger.warning("DEBUG: mat-select –ù–ï –ù–ê–ô–î–ï–ù–´ –≤ HTML!")
                    logger.info("DEBUG: –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ Angular –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, –∂–¥—É –µ—â–µ...")
                    time.sleep(10)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (Angular –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ headless)
                logger.info("üìù –ó–∞–ø–æ–ª–Ω—è—é —Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ JavaScript...")
                
                # –°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ –æ–ø—Ü–∏—è–º —á–µ—Ä–µ–∑ –∏—Ö ID
                fill_form_script = """
                console.log('==> –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã');
                
                // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ mat-select –∏ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ –ø–æ ID
                function selectOption(selectId, optionId) {
                    return new Promise((resolve) => {
                        const select = document.getElementById(selectId);
                        if (select) {
                            select.click();
                            setTimeout(() => {
                                const option = document.getElementById(optionId);
                                if (option) {
                                    option.click();
                                    console.log('Clicked:', optionId);
                                    setTimeout(resolve, 1000);
                                } else {
                                    console.error('Option not found:', optionId);
                                    resolve();
                                }
                            }, 1000);
                        } else {
                            console.error('Select not found:', selectId);
                            resolve();
                        }
                    });
                }
                
                // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
                async function fillForm() {
                    console.log('1. –í—ã–±–∏—Ä–∞—é Application Centre - Vitebsk');
                    await selectOption('mat-select-0', 'BLRVIT');
                    
                    console.log('2. –í—ã–±–∏—Ä–∞—é Long Term Visa');
                    await selectOption('mat-select-2', 'BLRLTV');
                    
                    console.log('3. –í—ã–±–∏—Ä–∞—é D - visa');
                    await selectOption('mat-select-1', 'BLRVI');
                    
                    console.log('4. –ù–∞–∂–∏–º–∞—é Continue');
                    setTimeout(() => {
                        const btn = document.querySelector('button[type="submit"], button.btn-brand-orange');
                        if (btn && !btn.disabled) {
                            btn.click();
                            console.log('Button clicked!');
                        } else {
                            console.error('Button not found or disabled');
                        }
                    }, 2000);
                }
                
                fillForm();
                return 'started';
                """
                
                self.driver.execute_script(fill_form_script)
                logger.info("‚úÖ JavaScript –∑–∞–ø—É—â–µ–Ω")
                time.sleep(15)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –≤–∞—Ä–∏–∞–Ω—Ç 1
                logger.info("üìä –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è D - visa...")
                page_text = self.driver.page_source
                page_lower = page_text.lower()
                
                # DEBUG: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –≤–∏–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                logger.info("DEBUG: –ü—Ä–æ–≤–µ—Ä—è—é –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:")
                logger.info(f"  'no slots available': {'–î–ê' if 'no slots available' in page_lower else '–ù–ï–¢'}")
                logger.info(f"  'no appointments': {'–î–ê' if 'no appointments' in page_lower else '–ù–ï–¢'}")
                logger.info(f"  'earliest': {'–î–ê' if 'earliest' in page_lower else '–ù–ï–¢'}")
                logger.info(f"  'calendar': {'–î–ê' if 'calendar' in page_lower else '–ù–ï–¢'}")
                logger.info(f"  'select date': {'–î–ê' if 'select date' in page_lower else '–ù–ï–¢'}")
                logger.info(f"  'book appointment': {'–î–ê' if 'book appointment' in page_lower else '–ù–ï–¢'}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                visible_text = self.driver.find_element(By.TAG_NAME, "body").text
                logger.info(f"DEBUG: –í–∏–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
                logger.info(f"{visible_text[:500]}...")
                
                results = []
                
                if "no slots available" in page_lower or "no appointments" in page_lower:
                    logger.info("  ‚ùå D - visa: –°–ª–æ—Ç–æ–≤ –Ω–µ—Ç")
                    results.append({'visa': 'D - visa', 'available': False})
                elif "earliest" in page_lower or "calendar" in page_lower or "select date" in page_lower or "book appointment" in page_lower:
                    logger.info("  üéâ D - visa: –°–õ–û–¢ –ù–ê–ô–î–ï–ù!")
                    results.append({'visa': 'D - visa', 'available': True})
                else:
                    logger.info("  ‚ùì D - visa: –ù–µ—è—Å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                    results.append({'visa': 'D - visa', 'available': False})
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç 2 - Premium Lounge
                logger.info("üìã –ü—Ä–æ–≤–µ—Ä—è—é D visa - Premium Lounge...")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∏ –≤—ã–±–∏—Ä–∞–µ–º Premium
                self.driver.back()
                time.sleep(3)
                
                select_premium_script = """
                setTimeout(() => {
                    const select = document.getElementById('mat-select-1');
                    if (select) {
                        select.click();
                        setTimeout(() => {
                            const option = document.getElementById('BLRVPL');
                            if (option) {
                                option.click();
                                console.log('Premium selected');
                                setTimeout(() => {
                                    const btn = document.querySelector('button.btn-brand-orange');
                                    if (btn) btn.click();
                                }, 2000);
                            }
                        }, 1000);
                    }
                }, 1000);
                """
                
                self.driver.execute_script(select_premium_script)
                time.sleep(15)
                
                page_text = self.driver.page_source.lower()
                
                if "no slots available" in page_text or "no appointments" in page_text:
                    logger.info("  ‚ùå Premium: –°–ª–æ—Ç–æ–≤ –Ω–µ—Ç")
                    results.append({'visa': 'D visa - Premium', 'available': False})
                elif "earliest" in page_text or "calendar" in page_text:
                    logger.info("  üéâ Premium: –°–õ–û–¢ –ù–ê–ô–î–ï–ù!")
                    results.append({'visa': 'D visa - Premium', 'available': True})
                else:
                    logger.info("  ‚ùì Premium: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é")
                    results.append({'visa': 'D visa - Premium', 'available': False})
                
                logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                return results
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã: {e}")
                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                try:
                    screenshot = f"error_{datetime.now().strftime('%H%M%S')}.png"
                    self.driver.save_screenshot(screenshot)
                    logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: {screenshot}")
                except:
                    pass
                return []
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return []
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            if self.driver:
                try:
                    self.driver.quit()
                except:
                    pass
                self.driver = None
    
    def send_email(self, visa_type):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email"""
        if not self.sender_email or not self.sender_password:
            logger.error("Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return False
        
        try:
            msg = MIMEMultipart()
            msg['From'] = self.sender_email
            msg['To'] = self.recipient_email
            msg['Subject'] = f'üéâ –°–õ–û–¢ –î–û–°–¢–£–ü–ï–ù: {visa_type}!'
            
            body = f"""
            <html><body>
                <h1 style="color: green;">–°–õ–û–¢ –ù–ê–ô–î–ï–ù!</h1>
                <p><strong>–í—Ä–µ–º—è:</strong> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</p>
                <p><strong>–í–∏–∑–∞:</strong> {visa_type}</p>
                <h2 style="color: red;">–ë–´–°–¢–†–ï–ï –ó–ê–ü–ò–°–´–í–ê–ô–¢–ï–°–¨!</h2>
                <p><a href="https://services.vfsglobal.by/" style="font-size: 20px; background: green; color: white; padding: 15px;">‚Üí –ó–ê–ü–ò–°–ê–¢–¨–°–Ø –°–ï–ô–ß–ê–°</a></p>
            </body></html>
            """
            
            msg.attach(MIMEText(body, 'html'))
            
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.sender_email, self.sender_password)
                server.send_message(msg)
            
            logger.info(f"‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {self.recipient_email}!")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ email: {e}")
            return False
    
    def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª - –í–°–Å –ß–ï–†–ï–ó –ë–†–ê–£–ó–ï–†"""
        logger.info("=" * 70)
        logger.info("ü§ñ –ü–û–õ–ù–û–°–¢–¨–Æ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ë–û–¢ (–ß–ï–†–ï–ó –ë–†–ê–£–ó–ï–†)")
        logger.info("=" * 70)
        logger.info(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.check_interval} —Å–µ–∫")
        logger.info(f"Email: {self.recipient_email}")
        logger.info("=" * 70)
        logger.info("")
        
        while True:
            try:
                current_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
                logger.info(f"\n{'='*70}")
                logger.info(f"üîç –ü–†–û–í–ï–†–ö–ê [{current_time}]")
                logger.info(f"{'='*70}\n")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä (—Ç–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!)
                results = self.get_fresh_tokens_and_check_slots()
                
                slot_found = False
                
                for result in results:
                    if result.get('available'):
                        slot_found = True
                        logger.info(f"\nüéâüéâüéâ –ù–ê–ô–î–ï–ù –°–õ–û–¢: {result['visa']} üéâüéâüéâ\n")
                        
                        if not self.notification_sent:
                            self.send_email(result['visa'])
                            self.notification_sent = True
                
                if not slot_found:
                    logger.info("\n‚ùå –°–ª–æ—Ç–æ–≤ –Ω–µ—Ç")
                    self.notification_sent = False
                
                logger.info(f"\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {self.check_interval} —Å–µ–∫")
                logger.info(f"{'='*70}\n")
                
                time.sleep(self.check_interval)
                
            except KeyboardInterrupt:
                logger.info("\nüõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                logger.info("–ü—Ä–æ–±—É—é —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫...")
                time.sleep(60)

if __name__ == "__main__":
    checker = AutoVisaChecker()
    checker.run()

