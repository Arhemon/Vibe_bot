import os
import time
import requests
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import logging
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AutoVisaChecker:
    def __init__(self):
        self.site_url = "https://services.vfsglobal.by/"
        self.recipient_email = "gannibal231@gmail.com"
        
        # Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
        self.smtp_port = int(os.getenv('SMTP_PORT', '587'))
        self.sender_email = os.getenv('SENDER_EMAIL')
        self.sender_password = os.getenv('SENDER_PASSWORD')
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (3 –º–∏–Ω—É—Ç—ã —á—Ç–æ–±—ã —Ç–æ–∫–µ–Ω—ã –Ω–µ –∏—Å—Ç–µ–∫–∞–ª–∏)
        self.check_interval = int(os.getenv('CHECK_INTERVAL', '180'))
        
        self.notification_sent = False
        self.driver = None
    
    def init_browser(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±—Ä–∞—É–∑–µ—Ä —Å –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º Network"""
        try:
            chrome_options = Options()
            chrome_options.add_argument('--headless')
            chrome_options.add_argument('--no-sandbox')
            chrome_options.add_argument('--disable-dev-shm-usage')
            chrome_options.add_argument('--disable-gpu')
            chrome_options.add_argument('--window-size=1920,1080')
            
            # –í–∫–ª—é—á–∞–µ–º Performance logging –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
            chrome_options.set_capability('goog:loggingPrefs', {'performance': 'ALL'})
            
            self.driver = webdriver.Chrome(options=chrome_options)
            logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False
    
    def get_fresh_tokens_and_check_slots(self):
        """–ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã –ò —Å—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ª–æ—Ç—ã"""
        try:
            logger.info("üîÑ –û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤...")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä
            if self.driver:
                try:
                    self.driver.quit()
                except:
                    pass
            
            if not self.init_browser():
                return []
            
            logger.info("üåê –ó–∞—Ö–æ–∂—É –Ω–∞ —Å–∞–π—Ç...")
            self.driver.get(self.site_url)
            time.sleep(6)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º popup
            try:
                btn = WebDriverWait(self.driver, 5).until(
                    EC.element_to_be_clickable((By.ID, "onetrust-accept-btn-handler"))
                )
                btn.click()
                time.sleep(2)
            except:
                pass
            
            # –ñ–¥–µ–º Angular
            time.sleep(4)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É - –ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤
            logger.info("üìù –ó–∞–ø–æ–ª–Ω—è—é —Ñ–æ—Ä–º—É...")
            wait = WebDriverWait(self.driver, 30)
            
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.info("DEBUG: –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")
                page_source = self.driver.page_source
                if 'mat-select' in page_source:
                    logger.info("DEBUG: mat-select —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –≤ HTML")
                else:
                    logger.warning("DEBUG: mat-select –ù–ï –ù–ê–ô–î–ï–ù–´ –≤ HTML!")
                    logger.info("DEBUG: –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ Angular –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, –∂–¥—É –µ—â–µ...")
                    time.sleep(10)
                
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Country
                logger.info("  Country...")
                country = None
                
                selectors = [
                    "mat-select[formcontrolname='countryCode']",
                    "#mat-select-0",
                    "mat-select:first-of-type",
                    ".country-select",
                ]
                
                for selector in selectors:
                    try:
                        country = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, selector)))
                        logger.info(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑: {selector}")
                        break
                    except:
                        continue
                
                if not country:
                    raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ Country")
                
                country.click()
                time.sleep(2)
                
                belarus = wait.until(EC.element_to_be_clickable(
                    (By.XPATH, "//span[contains(text(), 'Belarus')]")
                ))
                belarus.click()
                time.sleep(3)
                
                # Mission  
                logger.info("  Mission...")
                mission = wait.until(EC.element_to_be_clickable(
                    (By.CSS_SELECTOR, "mat-select[formcontrolname='missionCode']")
                ))
                mission.click()
                time.sleep(1)
                
                bulgaria = wait.until(EC.element_to_be_clickable(
                    (By.XPATH, "//span[contains(text(), 'Bulgaria')]")
                ))
                bulgaria.click()
                time.sleep(2)
                
                # VAC
                logger.info("  VAC...")
                vac = wait.until(EC.element_to_be_clickable(
                    (By.CSS_SELECTOR, "mat-select[formcontrolname='vacCode']")
                ))
                vac.click()
                time.sleep(1)
                
                vit = wait.until(EC.element_to_be_clickable(
                    (By.XPATH, "//span[contains(text(), 'VIT')]")
                ))
                vit.click()
                time.sleep(2)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –û–ë–ê —Ç–∏–ø–∞ –≤–∏–∑
                results = []
                
                for visa_type in ['BLRVPL', 'BLRVI']:
                    logger.info(f"\nüìã –ü—Ä–æ–≤–µ—Ä—è—é {visa_type}...")
                    
                    # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –≤–∏–∑—ã
                    logger.info("  Visa Category...")
                    visa_cat = wait.until(EC.element_to_be_clickable(
                        (By.CSS_SELECTOR, "mat-select[formcontrolname='visaCategoryCode']")
                    ))
                    visa_cat.click()
                    time.sleep(1)
                    
                    # –ò—â–µ–º –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é
                    options = self.driver.find_elements(By.CSS_SELECTOR, "mat-option")
                    for opt in options:
                        if visa_type in opt.text or (visa_type == 'BLRVPL' and 'PL' in opt.text):
                            opt.click()
                            break
                    
                    time.sleep(2)
                    
                    # –ù–∞–∂–∏–º–∞–µ–º Continue
                    logger.info("  –ù–∞–∂–∏–º–∞—é Continue...")
                    btn = wait.until(EC.element_to_be_clickable(
                        (By.XPATH, "//button[@type='submit' or contains(., 'Continue')]")
                    ))
                    btn.click()
                    time.sleep(6)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    page_text = self.driver.page_source.lower()
                    
                    if "no slots available" in page_text or "no appointments" in page_text:
                        logger.info(f"  ‚ùå {visa_type}: –°–ª–æ—Ç–æ–≤ –Ω–µ—Ç")
                        results.append({'visa': visa_type, 'available': False})
                    elif "available" in page_text or "slot" in page_text:
                        logger.info(f"  üéâ {visa_type}: –°–õ–û–¢ –ù–ê–ô–î–ï–ù!")
                        results.append({'visa': visa_type, 'available': True, 'data': 'Slot found via browser'})
                    else:
                        logger.info(f"  ‚ùì {visa_type}: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
                        results.append({'visa': visa_type, 'available': False})
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥ –µ—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                    if visa_type != 'BLRVI':
                        try:
                            self.driver.back()
                            time.sleep(3)
                        except:
                            pass
                
                logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                return results
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã: {e}")
                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                try:
                    screenshot = f"error_{datetime.now().strftime('%H%M%S')}.png"
                    self.driver.save_screenshot(screenshot)
                    logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: {screenshot}")
                except:
                    pass
                return []
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return []
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            if self.driver:
                try:
                    self.driver.quit()
                except:
                    pass
                self.driver = None
    
    def send_email(self, visa_type):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email"""
        if not self.sender_email or not self.sender_password:
            logger.error("Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return False
        
        try:
            msg = MIMEMultipart()
            msg['From'] = self.sender_email
            msg['To'] = self.recipient_email
            msg['Subject'] = f'üéâ –°–õ–û–¢ –î–û–°–¢–£–ü–ï–ù: {visa_type}!'
            
            body = f"""
            <html><body>
                <h1 style="color: green;">–°–õ–û–¢ –ù–ê–ô–î–ï–ù!</h1>
                <p><strong>–í—Ä–µ–º—è:</strong> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</p>
                <p><strong>–í–∏–∑–∞:</strong> {visa_type}</p>
                <h2 style="color: red;">–ë–´–°–¢–†–ï–ï –ó–ê–ü–ò–°–´–í–ê–ô–¢–ï–°–¨!</h2>
                <p><a href="https://services.vfsglobal.by/" style="font-size: 20px; background: green; color: white; padding: 15px;">‚Üí –ó–ê–ü–ò–°–ê–¢–¨–°–Ø –°–ï–ô–ß–ê–°</a></p>
            </body></html>
            """
            
            msg.attach(MIMEText(body, 'html'))
            
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.sender_email, self.sender_password)
                server.send_message(msg)
            
            logger.info(f"‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {self.recipient_email}!")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ email: {e}")
            return False
    
    def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª - –í–°–Å –ß–ï–†–ï–ó –ë–†–ê–£–ó–ï–†"""
        logger.info("=" * 70)
        logger.info("ü§ñ –ü–û–õ–ù–û–°–¢–¨–Æ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ë–û–¢ (–ß–ï–†–ï–ó –ë–†–ê–£–ó–ï–†)")
        logger.info("=" * 70)
        logger.info(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.check_interval} —Å–µ–∫")
        logger.info(f"Email: {self.recipient_email}")
        logger.info("=" * 70)
        logger.info("")
        
        while True:
            try:
                current_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
                logger.info(f"\n{'='*70}")
                logger.info(f"üîç –ü–†–û–í–ï–†–ö–ê [{current_time}]")
                logger.info(f"{'='*70}\n")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä (—Ç–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!)
                results = self.get_fresh_tokens_and_check_slots()
                
                slot_found = False
                
                for result in results:
                    if result.get('available'):
                        slot_found = True
                        logger.info(f"\nüéâüéâüéâ –ù–ê–ô–î–ï–ù –°–õ–û–¢: {result['visa']} üéâüéâüéâ\n")
                        
                        if not self.notification_sent:
                            self.send_email(result['visa'])
                            self.notification_sent = True
                
                if not slot_found:
                    logger.info("\n‚ùå –°–ª–æ—Ç–æ–≤ –Ω–µ—Ç")
                    self.notification_sent = False
                
                logger.info(f"\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {self.check_interval} —Å–µ–∫")
                logger.info(f"{'='*70}\n")
                
                time.sleep(self.check_interval)
                
            except KeyboardInterrupt:
                logger.info("\nüõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                logger.info("–ü—Ä–æ–±—É—é —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫...")
                time.sleep(60)

if __name__ == "__main__":
    checker = AutoVisaChecker()
    checker.run()

