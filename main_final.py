import os
import time
import requests
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import logging
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium_stealth import stealth
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AutoVisaChecker:
    def __init__(self):
        self.site_url = "https://services.vfsglobal.by/"
        self.recipient_email = "gannibal231@gmail.com"
        
        # Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
        self.smtp_port = int(os.getenv('SMTP_PORT', '587'))
        self.sender_email = os.getenv('SENDER_EMAIL')
        self.sender_password = os.getenv('SENDER_PASSWORD')
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (3 –º–∏–Ω—É—Ç—ã —á—Ç–æ–±—ã —Ç–æ–∫–µ–Ω—ã –Ω–µ –∏—Å—Ç–µ–∫–∞–ª–∏)
        self.check_interval = int(os.getenv('CHECK_INTERVAL', '180'))
        
        self.notification_sent = False
        self.driver = None
    
    def init_browser(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±—Ä–∞—É–∑–µ—Ä —Å –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ú –æ–±—Ö–æ–¥–æ–º Cloudflare"""
        try:
            logger.info("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é —Å—Ç–µ–ª—Å-–±—Ä–∞—É–∑–µ—Ä...")
            
            options = uc.ChromeOptions()
            
            # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-blink-features=AutomationControlled')
            options.add_argument('--disable-infobars')
            options.add_argument('--disable-notifications')
            options.add_argument('--disable-popup-blocking')
            options.add_argument('--window-size=1920,1080')
            
            # –ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            options.add_argument('--disable-web-security')
            options.add_argument('--disable-features=IsolateOrigins,site-per-process')
            options.add_argument('--allow-running-insecure-content')
            options.add_argument('--disable-webgl')
            options.add_argument('--disable-javascript-harmony-shipping')
            
            # User agent –∫–∞–∫ —É —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36')
            
            # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
            logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é undetected-chromedriver...")
            self.driver = uc.Chrome(
                options=options,
                headless=True,
                use_subprocess=False,
                version_main=141
            )
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º selenium-stealth –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
            logger.info("üé≠ –ü—Ä–∏–º–µ–Ω—è—é stealth –ø–ª–∞–≥–∏–Ω...")
            stealth(self.driver,
                languages=["en-US", "en"],
                vendor="Google Inc.",
                platform="Win32",
                webgl_vendor="Intel Inc.",
                renderer="Intel Iris OpenGL Engine",
                fix_hairline=True,
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ JavaScript
            self.driver.execute_cdp_cmd('Network.setUserAgentOverride', {
                "userAgent": 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36'
            })
            
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤ (FULL STEALTH MODE)")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def get_fresh_tokens_and_check_slots(self):
        """–ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã –ò —Å—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ª–æ—Ç—ã"""
        try:
            logger.info("üîÑ –û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤...")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä
            if self.driver:
                try:
                    self.driver.quit()
                except:
                    pass
            
            if not self.init_browser():
                return []
            
            logger.info("üåê –ó–∞—Ö–æ–∂—É –Ω–∞ —Å–∞–π—Ç...")
            self.driver.get(self.site_url)
            
            # –ñ–¥–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è Cloudflare challenge
            logger.info("‚è≥ –ñ–¥—É –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è Cloudflare challenge...")
            time.sleep(10)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—à–ª–∏ –ª–∏ Cloudflare
            page_source = self.driver.page_source.lower()
            if "sorry, you have been blocked" in page_source or "cloudflare" in page_source:
                logger.warning("‚ö†Ô∏è Cloudflare –±–ª–æ–∫–∏—Ä—É–µ—Ç, –∂–¥—É –µ—â–µ 10 —Å–µ–∫...")
                time.sleep(10)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
                page_source = self.driver.page_source.lower()
                if "sorry, you have been blocked" in page_source:
                    logger.error("‚ùå Cloudflare –ù–ï –ü–†–û–ü–£–°–¢–ò–õ!")
                    logger.info("üí° –ü–æ–ø—Ä–æ–±—É—é –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
                    self.driver.refresh()
                    time.sleep(10)
            else:
                logger.info("‚úÖ Cloudflare –ø—Ä–æ–π–¥–µ–Ω!")
            
            time.sleep(3)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º popup
            try:
                btn = WebDriverWait(self.driver, 5).until(
                    EC.element_to_be_clickable((By.ID, "onetrust-accept-btn-handler"))
                )
                btn.click()
                time.sleep(2)
            except:
                pass
            
            # –ñ–¥–µ–º Angular
            time.sleep(4)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É - –ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤
            logger.info("üìù –ó–∞–ø–æ–ª–Ω—è—é —Ñ–æ—Ä–º—É...")
            wait = WebDriverWait(self.driver, 30)
            
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.info("DEBUG: –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")
                page_source = self.driver.page_source
                if 'mat-select' in page_source:
                    logger.info("DEBUG: mat-select —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –≤ HTML")
                else:
                    logger.warning("DEBUG: mat-select –ù–ï –ù–ê–ô–î–ï–ù–´ –≤ HTML!")
                    logger.info("DEBUG: –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ Angular –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, –∂–¥—É –µ—â–µ...")
                    time.sleep(10)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (Angular –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ headless)
                logger.info("üìù –ó–∞–ø–æ–ª–Ω—è—é —Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ JavaScript...")
                
                # –ü–æ–ª—É—á–∞–µ–º cookies –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
                cookies_dict = {}
                for cookie in self.driver.get_cookies():
                    cookies_dict[cookie['name']] = cookie['value']
                
                cookies_str = "; ".join([f"{k}={v}" for k, v in cookies_dict.items()])
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(cookies_dict)} cookies")
                
                # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –Ω–∞–ø—Ä—è–º—É—é –∏—Å–ø–æ–ª—å–∑—É—è cookies –±—Ä–∞—É–∑–µ—Ä–∞
                api_url = "https://lift-api.vfsglobal.by/appointment/CheckIsSlotAvailable"
                
                results = []
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ —Ç–∏–ø–∞ –≤–∏–∑
                for visa_info in [
                    {"code": "BLRVI", "name": "D - visa"},
                    {"code": "BLRVPL", "name": "D visa - Premium Lounge"}
                ]:
                    logger.info(f"\nüìã –ü—Ä–æ–≤–µ—Ä—è—é {visa_info['name']}...")
                    
                    payload = {
                        "countryCode": "blr",
                        "loginUser": "Gannibal231@gmail.com",
                        "missionCode": "bgr",
                        "payCode": "",
                        "roleName": "Individual",
                        "vacCode": "BLRVIT",
                        "visaCategoryCode": visa_info['code']
                    }
                    
                    headers = {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'Accept': 'application/json, text/plain, */*',
                        'Origin': 'https://services.vfsglobal.by',
                        'Referer': 'https://services.vfsglobal.by/',
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                        'Cookie': cookies_str
                    }
                    
                    # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ requests —Å cookies –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞!
                    try:
                        response = requests.post(api_url, json=payload, headers=headers, timeout=30)
                        logger.info(f"  API –°—Ç–∞—Ç—É—Å: {response.status_code}")
                        
                        if response.status_code == 200:
                            data = response.json()
                            logger.info(f"  –û—Ç–≤–µ—Ç API: {data}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
                            if 'error' in data and data['error'].get('code') == 1035:
                                logger.info(f"  ‚ùå {visa_info['name']}: –°–ª–æ—Ç–æ–≤ –Ω–µ—Ç (error 1035)")
                                results.append({'visa': visa_info['name'], 'available': False})
                            elif data.get('earliestDate') or (data.get('earliestSlotLists') and len(data['earliestSlotLists']) > 0):
                                logger.info(f"  üéâ {visa_info['name']}: –°–õ–û–¢ –ù–ê–ô–î–ï–ù!")
                                logger.info(f"  –î–∞–Ω–Ω—ã–µ: {data}")
                                results.append({'visa': visa_info['name'], 'available': True, 'data': data})
                            else:
                                logger.info(f"  ‚ùì {visa_info['name']}: –ù–µ—è—Å–Ω—ã–π –æ—Ç–≤–µ—Ç: {data}")
                                results.append({'visa': visa_info['name'], 'available': False})
                        else:
                            logger.warning(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ API: {response.status_code}")
                            results.append({'visa': visa_info['name'], 'available': False})
                    
                    except Exception as e:
                        logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                        results.append({'visa': visa_info['name'], 'available': False})
                    
                    time.sleep(2)
                
                logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                return results
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã: {e}")
                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                try:
                    screenshot = f"error_{datetime.now().strftime('%H%M%S')}.png"
                    self.driver.save_screenshot(screenshot)
                    logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: {screenshot}")
                except:
                    pass
                return []
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return []
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            if self.driver:
                try:
                    self.driver.quit()
                except:
                    pass
                self.driver = None
    
    def send_email(self, visa_type):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email"""
        if not self.sender_email or not self.sender_password:
            logger.error("Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return False
        
        try:
            msg = MIMEMultipart()
            msg['From'] = self.sender_email
            msg['To'] = self.recipient_email
            msg['Subject'] = f'üéâ –°–õ–û–¢ –î–û–°–¢–£–ü–ï–ù: {visa_type}!'
            
            body = f"""
            <html><body>
                <h1 style="color: green;">–°–õ–û–¢ –ù–ê–ô–î–ï–ù!</h1>
                <p><strong>–í—Ä–µ–º—è:</strong> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</p>
                <p><strong>–í–∏–∑–∞:</strong> {visa_type}</p>
                <h2 style="color: red;">–ë–´–°–¢–†–ï–ï –ó–ê–ü–ò–°–´–í–ê–ô–¢–ï–°–¨!</h2>
                <p><a href="https://services.vfsglobal.by/" style="font-size: 20px; background: green; color: white; padding: 15px;">‚Üí –ó–ê–ü–ò–°–ê–¢–¨–°–Ø –°–ï–ô–ß–ê–°</a></p>
            </body></html>
            """
            
            msg.attach(MIMEText(body, 'html'))
            
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.sender_email, self.sender_password)
                server.send_message(msg)
            
            logger.info(f"‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {self.recipient_email}!")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ email: {e}")
            return False
    
    def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª - –í–°–Å –ß–ï–†–ï–ó –ë–†–ê–£–ó–ï–†"""
        logger.info("=" * 70)
        logger.info("ü§ñ –ü–û–õ–ù–û–°–¢–¨–Æ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ë–û–¢ (–ß–ï–†–ï–ó –ë–†–ê–£–ó–ï–†)")
        logger.info("=" * 70)
        logger.info(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.check_interval} —Å–µ–∫")
        logger.info(f"Email: {self.recipient_email}")
        logger.info("=" * 70)
        logger.info("")
        
        while True:
            try:
                current_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
                logger.info(f"\n{'='*70}")
                logger.info(f"üîç –ü–†–û–í–ï–†–ö–ê [{current_time}]")
                logger.info(f"{'='*70}\n")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä (—Ç–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!)
                results = self.get_fresh_tokens_and_check_slots()
                
                slot_found = False
                
                for result in results:
                    if result.get('available'):
                        slot_found = True
                        logger.info(f"\nüéâüéâüéâ –ù–ê–ô–î–ï–ù –°–õ–û–¢: {result['visa']} üéâüéâüéâ\n")
                        
                        if not self.notification_sent:
                            self.send_email(result['visa'])
                            self.notification_sent = True
                
                if not slot_found:
                    logger.info("\n‚ùå –°–ª–æ—Ç–æ–≤ –Ω–µ—Ç")
                    self.notification_sent = False
                
                logger.info(f"\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {self.check_interval} —Å–µ–∫")
                logger.info(f"{'='*70}\n")
                
                time.sleep(self.check_interval)
                
            except KeyboardInterrupt:
                logger.info("\nüõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                logger.info("–ü—Ä–æ–±—É—é —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫...")
                time.sleep(60)

if __name__ == "__main__":
    checker = AutoVisaChecker()
    checker.run()

