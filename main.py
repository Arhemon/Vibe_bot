import os
import time
import requests
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class VisaSlotChecker:
    def __init__(self):
        self.api_url = "https://lift-api.vfsglobal.by/appointment/CheckIsSlotAvailable"
        self.recipient_email = "gannibal231@gmail.com"
        
        # Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
        self.smtp_port = int(os.getenv('SMTP_PORT', '587'))
        self.sender_email = os.getenv('SENDER_EMAIL')
        self.sender_password = os.getenv('SENDER_PASSWORD')
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)
        self.check_interval = int(os.getenv('CHECK_INTERVAL', '300'))
        
        # –í–∞—Ä–∏–∞–Ω—Ç—ã payload –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.payloads = [
            {
                "countryCode": "blr",
                "loginUser": "Gannibal231@gmail.com",
                "missionCode": "bgr",
                "payCode": "",
                "roleName": "Individual",
                "vacCode": "BLRVIT",
                "visaCategoryCode": "BLRVPL"
            },
            {
                "countryCode": "blr",
                "loginUser": "Gannibal231@gmail.com",
                "missionCode": "bgr",
                "payCode": "",
                "roleName": "Individual",
                "vacCode": "BLRVIT",
                "visaCategoryCode": "BLRVI"
            }
        ]
        
        # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –±—ã–ª–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        self.notification_sent = False
    
    def check_slots(self, payload):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ API"""
        try:
            headers = {
                'Content-Type': 'application/json',
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            
            response = requests.post(
                self.api_url,
                json=payload,
                headers=headers,
                timeout=30
            )
            
            logger.info(f"–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"–û—Ç–≤–µ—Ç API: {data}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ "No slots available"
                if 'error' in data and data['error'].get('code') == 1035:
                    logger.info("–°–ª–æ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                    return False, None
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–∫–∏ –∏–ª–∏ –µ—Å—Ç—å earliestDate, –∑–Ω–∞—á–∏—Ç —Å–ª–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
                if data.get('earliestDate') or (data.get('earliestSlotLists') and len(data['earliestSlotLists']) > 0):
                    logger.info("üéâ –°–õ–û–¢ –ù–ê–ô–î–ï–ù!")
                    return True, data
                
                # –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –æ—à–∏–±–∫–∏ 1035, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Å–ª–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
                if 'error' not in data or data['error'].get('code') != 1035:
                    logger.info("üéâ –í–æ–∑–º–æ–∂–Ω–æ, —Å–ª–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç –æ—à–∏–±–∫–∏ 1035)")
                    return True, data
                
            return False, None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ª–æ—Ç–æ–≤: {str(e)}")
            return False, None
    
    def send_email_notification(self, slot_data, payload_type):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–Ω–æ–º —Å–ª–æ—Ç–µ"""
        if not self.sender_email or not self.sender_password:
            logger.error("Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ SENDER_EMAIL –∏ SENDER_PASSWORD")
            return False
        
        try:
            msg = MIMEMultipart()
            msg['From'] = self.sender_email
            msg['To'] = self.recipient_email
            msg['Subject'] = 'üéâ –î–û–°–¢–£–ü–ï–ù –°–õ–û–¢ –î–õ–Ø –í–ò–ó–´!'
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–µ
            body = f"""
            <html>
            <body>
                <h2>–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –ü–æ—è–≤–∏–ª—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏!</h2>
                <p><strong>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</strong> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</p>
                <p><strong>–¢–∏–ø –≤–∏–∑—ã:</strong> {payload_type}</p>
                
                <h3>–î–µ—Ç–∞–ª–∏:</h3>
                <pre>{slot_data}</pre>
                
                <p><strong>–ë—ã—Å—Ç—Ä–µ–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å!</strong></p>
                <p><a href="https://lift.vfsglobal.com/appointment">–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ø–∏—Å–∏</a></p>
            </body>
            </html>
            """
            
            msg.attach(MIMEText(body, 'html'))
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ email
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.sender_email, self.sender_password)
                server.send_message(msg)
            
            logger.info(f"‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {self.recipient_email}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {str(e)}")
            return False
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤...")
        logger.info(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval} —Å–µ–∫—É–Ω–¥")
        logger.info(f"Email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {self.recipient_email}")
        
        if not self.sender_email or not self.sender_password:
            logger.warning("‚ö†Ô∏è Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è!")
        
        while True:
            try:
                current_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
                logger.info(f"\n{'='*50}")
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ—Ç–æ–≤... [{current_time}]")
                
                slot_found = False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ payload
                for i, payload in enumerate(self.payloads, 1):
                    visa_type = payload['visaCategoryCode']
                    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ {i}: {visa_type}")
                    
                    is_available, slot_data = self.check_slots(payload)
                    
                    if is_available:
                        slot_found = True
                        logger.info(f"üéâ –ù–ê–ô–î–ï–ù –°–õ–û–¢ –¥–ª—è –≤–∏–∑—ã {visa_type}!")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                        if not self.notification_sent:
                            self.send_email_notification(slot_data, visa_type)
                            self.notification_sent = True
                            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É...")
                        else:
                            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    time.sleep(2)
                
                if not slot_found:
                    logger.info("‚ùå –°–ª–æ—Ç—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, –µ—Å–ª–∏ —Å–ª–æ—Ç—ã —Å–Ω–æ–≤–∞ —Å—Ç–∞–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
                    self.notification_sent = False
                
                logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {self.check_interval} —Å–µ–∫—É–Ω–¥")
                logger.info(f"{'='*50}\n")
                
                time.sleep(self.check_interval)
                
            except KeyboardInterrupt:
                logger.info("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
                logger.info("–ü—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
                time.sleep(60)

if __name__ == "__main__":
    checker = VisaSlotChecker()
    checker.run()

