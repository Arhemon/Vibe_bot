import os
import time
import requests
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import logging
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class VisaSlotChecker:
    def __init__(self):
        self.api_url = "https://lift-api.vfsglobal.by/appointment/CheckIsSlotAvailable"
        self.login_url = "https://lift-api.vfsglobal.by/user/login"
        self.recipient_email = "gannibal231@gmail.com"
        
        # Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
        self.smtp_port = int(os.getenv('SMTP_PORT', '587'))
        self.sender_email = os.getenv('SENDER_EMAIL')
        self.sender_password = os.getenv('SENDER_PASSWORD')
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)
        self.check_interval = int(os.getenv('CHECK_INTERVAL', '300'))
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏–Ω–∞
        self.vfs_email = os.getenv('VFS_EMAIL', 'gannibal231@gmail.com')
        self.vfs_password = os.getenv('VFS_PASSWORD', 'ZzamlXFvYj52Q+0Inao1QR/qf2gYFmgZuwYqFW0x9RP0XV/LALE+TSL68jaHLZTkRD0mGzB8wpmsHLRkzDgMxyUxpNRXqP5c5V/L5DersWqlnAz5Dj7kmbsy6iOk/1uzOBO0WZyrwlPRren0VHBurcOjge7ma5SD2yFOkgvML72JLJcYhMQc2olXDk8lZPDMlArFQb/fbx4399W56Oulkm1kVEOllQHYXXNkzp4EX0Q/9T0hQeOSgWKslkxTTUYDX9DsAQjWxO3xfsN12QaLdIhtUk2/Or7r600guxJQ3IwSsHTAur0ANelnvPy9pVH2CI9sbBsm1OBdfTQ96TbAYA==')
        self.vfs_captcha = os.getenv('VFS_CAPTCHA', '0.z5rs79DYQtvRu45yZDSEQjp9O6cyYNavh_UIzO6yYIBE2HCBcHuL23INX7gLSCOH7vbg3CmQ9be42IVH3hnfEp2KvZZS7vfG9S-2PshbuIGK4nlpI_blUUTS-Y6hG1VBxwvHLY0p95ETFHnKhk-BfzVxLq8hlgAVeskuVpzbxgGy4zCTR9NsxQVWFjYTi9LYMgdHl0Vx9NW-LOP_X9uNxVqkA2X4M5JXSwSUvRlnC6nOC1p38tHbkX2O5yi4gRUFT_Kmfvwbr17zDwh-xONDpUHnD9LVUkijjAVxFFqkh_H9rHYskU9czdaG_e1417kb5OlAp1Ue7J9fs_DCEL5__CpGtV6ap2RQbGepLWJPq0yMId3ZR8QO-hYGdDMRVobQIPjUMYZKYsBGIDznUdmGbDF77afUjpT7G12qJFHV1bPEzpcWZtTIFlF9mSy0nRkMRTwgq2b37ULawZZqOcg3mjJ6yQr3jvOJ-IFHfSypv17h4yYsSdUQmDYtDRtcUjuj4lu8PuUfZcdrE2xaMmcGpDHMnPm8DoGh6sJf-MoEfgXRjSteU9rMoot7JXFbFkZMzW9mOUL2q-tJ6CRPo50_aTjK1F0hXDbme_NsdSHzCrfSI0co2WhvzgoqQPIF06CqRRR8HOGiKWw_6686E5CpoaRrAD2raVyO7ffwYbrPcfFgUVZXpVvZhXotjBn3s4xnIi0VPL-uuRhlbAvFPEY8Su4ifOiFO2IE-x7rPlZHoCCSWGm4oq_CCFE_si_PCSzXWj_9jk6NPA1Jh3NyfwXcBvESqRm_0IdKsQzHL2FNqbd3Wqeiux_-ahIul6mqxcqvofPzXvr1kzqy-iS87EPGp4zpwmRCRN7VjO_CgbondeNuhzcXqVXGIaxabbrTAChztcmWk7rylEGX-_j3trIBa9Hk8eRXsCmD4NPf-cx_X9U.Kzbs0HjG-jAJIeWmGh_EcA.be600d9c25a939c7d8103dca8e38491b30c616e30f05a48e9dc13a151ff9e5ce')
        
        # –¢–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–±—É–¥—É—Ç –ø–æ–ª—É—á–µ–Ω—ã –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞)
        self.authorize = ''
        self.clientsource = ''
        self.cookies = ''
        self.route = 'blr/en/bgr'
        
        # Session –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cookies –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        self.session = requests.Session()
        
        # –í–∞—Ä–∏–∞–Ω—Ç—ã payload –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.payloads = [
            {
                "countryCode": "blr",
                "loginUser": "Gannibal231@gmail.com",
                "missionCode": "bgr",
                "payCode": "",
                "roleName": "Individual",
                "vacCode": "BLRVIT",
                "visaCategoryCode": "BLRVPL"
            },
            {
                "countryCode": "blr",
                "loginUser": "Gannibal231@gmail.com",
                "missionCode": "bgr",
                "payCode": "",
                "roleName": "Individual",
                "vacCode": "BLRVIT",
                "visaCategoryCode": "BLRVI"
            }
        ]
        
        # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –±—ã–ª–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        self.notification_sent = False
    
    def login(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥–∏–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤"""
        try:
            logger.info("üîê –í—ã–ø–æ–ª–Ω—è—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥–∏–Ω...")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã payload
            login_payloads = [
                # –í–∞—Ä–∏–∞–Ω—Ç 1: —Å captcha
                {
                    "username": self.vfs_email,
                    "password": self.vfs_password,
                    "missioncode": "bgr",
                    "countrycode": "blr",
                    "languageCode": "en-US",
                    "captcha_version": "cloudflare-v1",
                    "captcha_api_key": self.vfs_captcha
                },
                # –í–∞—Ä–∏–∞–Ω—Ç 2: –±–µ–∑ captcha
                {
                    "username": self.vfs_email,
                    "password": self.vfs_password,
                    "missioncode": "bgr",
                    "countrycode": "blr",
                    "languageCode": "en-US"
                },
                # –í–∞—Ä–∏–∞–Ω—Ç 3: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π
                {
                    "username": self.vfs_email,
                    "password": self.vfs_password
                }
            ]
            
            for attempt, login_payload in enumerate(login_payloads, 1):
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç {attempt}...")
                
                headers = {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json, text/plain, */*',
                    'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
                    'Origin': 'https://services.vfsglobal.by',
                    'Referer': 'https://services.vfsglobal.by/',
                    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36'
                }
                
                response = self.session.post(
                    self.login_url,
                    json=login_payload,
                    headers=headers,
                    timeout=30
                )
                
                logger.info(f"–û—Ç–≤–µ—Ç –ª–æ–≥–∏–Ω–∞: –°—Ç–∞—Ç—É—Å {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    logger.info(f"‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω!")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    if 'authorize' in data or 'token' in data:
                        self.authorize = data.get('authorize', data.get('token', ''))
                        logger.info(f"‚úÖ –¢–æ–∫–µ–Ω authorize –ø–æ–ª—É—á–µ–Ω ({len(self.authorize)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    
                    if 'clientsource' in data:
                        self.clientsource = data.get('clientsource', '')
                        logger.info(f"‚úÖ –¢–æ–∫–µ–Ω clientsource –ø–æ–ª—É—á–µ–Ω ({len(self.clientsource)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies –∏–∑ session
                    cookies_list = []
                    for cookie in self.session.cookies:
                        cookies_list.append(f"{cookie.name}={cookie.value}")
                    self.cookies = "; ".join(cookies_list)
                    
                    if self.cookies:
                        logger.info(f"‚úÖ Cookies –ø–æ–ª—É—á–µ–Ω—ã ({len(self.cookies)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    if self.authorize or self.cookies:
                        logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                        return True
                    else:
                        logger.warning("‚ö†Ô∏è –¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ –ª–æ–≥–∏–Ω–∞")
                        logger.debug(f"–û—Ç–≤–µ—Ç: {data}")
                else:
                    logger.warning(f"‚ùå –í–∞—Ä–∏–∞–Ω—Ç {attempt} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {response.status_code}")
                    try:
                        logger.debug(f"–û—Ç–≤–µ—Ç: {response.text[:200]}")
                    except:
                        pass
                    
                    # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
                    time.sleep(1)
                    continue
            
            # –ï—Å–ª–∏ –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
            logger.error("‚ùå –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ª–æ–≥–∏–Ω–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
            return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ: {str(e)}")
            return False
    
    def check_slots(self, payload):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ API"""
        try:
            headers = {
                'Content-Type': 'application/json;charset=UTF-8',
                'Accept': 'application/json, text/plain, */*',
                'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
                'Accept-Encoding': 'gzip, deflate, br, zstd',
                'Origin': 'https://services.vfsglobal.by',
                'Referer': 'https://services.vfsglobal.by/',
                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36',
                'Sec-Ch-Ua': '"Chromium";v="140", "Not=A?Brand";v="24", "Google Chrome";v="140"',
                'Sec-Ch-Ua-Mobile': '?0',
                'Sec-Ch-Ua-Platform': '"macOS"',
                'Sec-Fetch-Dest': 'empty',
                'Sec-Fetch-Mode': 'cors',
                'Sec-Fetch-Site': 'same-site',
                'Cache-Control': 'no-cache',
                'Pragma': 'no-cache',
                'Priority': 'u=1, i'
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ VFS Global
            if self.authorize:
                headers['authorize'] = self.authorize
            
            if self.clientsource:
                headers['clientsource'] = self.clientsource
            
            if self.route:
                headers['route'] = self.route
            
            # –î–æ–±–∞–≤–ª—è–µ–º cookies
            if self.cookies:
                headers['Cookie'] = self.cookies
            
            response = self.session.post(
                self.api_url,
                json=payload,
                headers=headers,
                timeout=30
            )
            
            logger.info(f"–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            try:
                response_text = response.text
                logger.debug(f"–û—Ç–≤–µ—Ç API: {response_text[:500]}")
            except:
                pass
            
            if response.status_code == 401:
                logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ 401: –¢–æ–∫–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–ª–∏, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω")
                return None, 'AUTH_REQUIRED'
            
            if response.status_code == 403:
                logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ 403: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return None, 'AUTH_REQUIRED'
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"–û—Ç–≤–µ—Ç API: {data}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ "No slots available"
                if 'error' in data and data['error'].get('code') == 1035:
                    logger.info("–°–ª–æ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                    return False, None
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–∫–∏ –∏–ª–∏ –µ—Å—Ç—å earliestDate, –∑–Ω–∞—á–∏—Ç —Å–ª–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
                if data.get('earliestDate') or (data.get('earliestSlotLists') and len(data['earliestSlotLists']) > 0):
                    logger.info("üéâ –°–õ–û–¢ –ù–ê–ô–î–ï–ù!")
                    return True, data
                
                # –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –æ—à–∏–±–∫–∏ 1035, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Å–ª–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
                if 'error' not in data or data['error'].get('code') != 1035:
                    logger.info("üéâ –í–æ–∑–º–æ–∂–Ω–æ, —Å–ª–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç –æ—à–∏–±–∫–∏ 1035)")
                    return True, data
                
            return False, None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ª–æ—Ç–æ–≤: {str(e)}")
            return False, None
    
    def send_email_notification(self, slot_data, payload_type):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–Ω–æ–º —Å–ª–æ—Ç–µ"""
        if not self.sender_email or not self.sender_password:
            logger.error("Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ SENDER_EMAIL –∏ SENDER_PASSWORD")
            return False
        
        try:
            msg = MIMEMultipart()
            msg['From'] = self.sender_email
            msg['To'] = self.recipient_email
            msg['Subject'] = 'üéâ –î–û–°–¢–£–ü–ï–ù –°–õ–û–¢ –î–õ–Ø –í–ò–ó–´!'
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–µ
            body = f"""
            <html>
            <body>
                <h2>–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –ü–æ—è–≤–∏–ª—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏!</h2>
                <p><strong>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</strong> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</p>
                <p><strong>–¢–∏–ø –≤–∏–∑—ã:</strong> {payload_type}</p>
                
                <h3>–î–µ—Ç–∞–ª–∏:</h3>
                <pre>{slot_data}</pre>
                
                <p><strong>–ë—ã—Å—Ç—Ä–µ–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å!</strong></p>
                <p><a href="https://lift.vfsglobal.com/appointment">–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ø–∏—Å–∏</a></p>
            </body>
            </html>
            """
            
            msg.attach(MIMEText(body, 'html'))
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ email
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.sender_email, self.sender_password)
                server.send_message(msg)
            
            logger.info(f"‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {self.recipient_email}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {str(e)}")
            return False
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        logger.info("=" * 70)
        logger.info("ü§ñ –ë–û–¢ –ó–ê–ü–£–©–ï–ù –° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ú –û–ë–ù–û–í–õ–ï–ù–ò–ï–ú –¢–û–ö–ï–ù–û–í")
        logger.info("=" * 70)
        logger.info(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval} —Å–µ–∫—É–Ω–¥")
        logger.info(f"Email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {self.recipient_email}")
        logger.info(f"VFS –∞–∫–∫–∞—É–Ω—Ç: {self.vfs_email}")
        
        if not self.sender_email or not self.sender_password:
            logger.warning("‚ö†Ô∏è Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è!")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –ª–æ–≥–∏–Ω
        logger.info("")
        if not self.login():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω. –í—ã—Ö–æ–¥.")
            return
        
        logger.info("")
        logger.info("‚úÖ –ì–æ—Ç–æ–≤ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É!")
        
        login_retry_count = 0
        max_login_retries = 3
        
        while True:
            try:
                current_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
                logger.info(f"\n{'='*50}")
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ—Ç–æ–≤... [{current_time}]")
                
                slot_found = False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ payload
                for i, payload in enumerate(self.payloads, 1):
                    visa_type = payload['visaCategoryCode']
                    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ {i}: {visa_type}")
                    
                    is_available, slot_data = self.check_slots(payload)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è
                    if is_available is None and slot_data == 'AUTH_REQUIRED':
                        logger.warning("‚ö†Ô∏è –¢–æ–∫–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–ø–æ–ª–Ω—è—é –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω...")
                        if self.login():
                            logger.info("‚úÖ –õ–æ–≥–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø–æ–≤—Ç–æ—Ä—è—é –ø—Ä–æ–≤–µ—Ä–∫—É...")
                            is_available, slot_data = self.check_slots(payload)
                            login_retry_count = 0  # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞
                        else:
                            login_retry_count += 1
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ª–æ–≥–∏–Ω (–ø–æ–ø—ã—Ç–∫–∞ {login_retry_count}/{max_login_retries})")
                            if login_retry_count >= max_login_retries:
                                logger.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ª–æ–≥–∏–Ω–∞. –í—ã—Ö–æ–¥.")
                                return
                            time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                            continue
                    
                    if is_available:
                        slot_found = True
                        logger.info(f"üéâ –ù–ê–ô–î–ï–ù –°–õ–û–¢ –¥–ª—è –≤–∏–∑—ã {visa_type}!")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                        if not self.notification_sent:
                            self.send_email_notification(slot_data, visa_type)
                            self.notification_sent = True
                            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É...")
                        else:
                            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    time.sleep(2)
                
                if not slot_found:
                    logger.info("‚ùå –°–ª–æ—Ç—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, –µ—Å–ª–∏ —Å–ª–æ—Ç—ã —Å–Ω–æ–≤–∞ —Å—Ç–∞–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
                    self.notification_sent = False
                
                logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {self.check_interval} —Å–µ–∫—É–Ω–¥")
                logger.info(f"{'='*50}\n")
                
                time.sleep(self.check_interval)
                
            except KeyboardInterrupt:
                logger.info("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
                logger.info("–ü—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
                time.sleep(60)

if __name__ == "__main__":
    checker = VisaSlotChecker()
    checker.run()

