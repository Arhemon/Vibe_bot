#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –ø–æ–º–æ—â—å—é Selenium
"""
import os
import time
import re
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

def update_env_token(key, value):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ .env —Ñ–∞–π–ª–µ"""
    env_path = '.env'
    
    if not os.path.exists(env_path):
        print(f"‚ùå –§–∞–π–ª {env_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    with open(env_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–ª—é—á–æ–º
    pattern = f'^{key}=.*$'
    replacement = f'{key}={value}'
    
    if re.search(pattern, content, re.MULTILINE):
        # –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        new_content = re.sub(pattern, replacement, content, flags=re.MULTILINE)
        with open(env_path, 'w', encoding='utf-8') as f:
            f.write(new_content)
        return True
    else:
        print(f"‚ùå –ö–ª—é—á {key} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return False

def extract_tokens():
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞"""
    print("=" * 70)
    print("üîê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –¢–û–ö–ï–ù–û–í")
    print("=" * 70)
    print()
    
    # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Network –≤ Chrome
    caps = DesiredCapabilities.CHROME
    caps['goog:loggingPrefs'] = {'performance': 'ALL'}
    
    chrome_options = Options()
    chrome_options.add_argument('--window-size=1920,1080')
    chrome_options.set_capability('goog:loggingPrefs', {'performance': 'ALL'})
    
    driver = None
    
    try:
        print("üåê –û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä...")
        driver = webdriver.Chrome(options=chrome_options)
        
        print("üìù –û—Ç–∫—Ä—ã–≤–∞—é —Å–∞–π—Ç VFS Global...")
        driver.get("https://services.vfsglobal.by/")
        
        print()
        print("=" * 70)
        print("‚è∏Ô∏è  –ü–ê–£–ó–ê –î–õ–Ø –†–£–ß–ù–û–ô –ü–†–û–í–ï–†–ö–ò –°–õ–û–¢–û–í")
        print("=" * 70)
        print()
        print("–ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
        print("1. –í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –±—Ä–∞—É–∑–µ—Ä–µ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É:")
        print("   - Country: Belarus")
        print("   - Mission: Bulgaria")
        print("   - VAC: BLRVIT")
        print("   - Visa Category: BLRVPL –∏–ª–∏ BLRVI")
        print()
        print("2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'Continue' –∏–ª–∏ 'Check Slots'")
        print()
        print("3. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
        print()
        print("4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ Enter")
        print()
        input("üëâ –ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å... ")
        
        print()
        print("üîç –ò—â—É —Ç–æ–∫–µ–Ω—ã –≤ –ª–æ–≥–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        logs = driver.get_log('performance')
        
        authorize_token = None
        clientsource_token = None
        cookies_str = None
        
        # –ò—â–µ–º –∑–∞–ø—Ä–æ—Å –∫ CheckIsSlotAvailable
        for entry in logs:
            try:
                import json
                log = json.loads(entry['message'])
                message = log.get('message', {})
                method = message.get('method', '')
                
                # –ò—â–µ–º –∑–∞–ø—Ä–æ—Å
                if method == 'Network.requestWillBeSent':
                    params = message.get('params', {})
                    request = params.get('request', {})
                    url = request.get('url', '')
                    
                    if 'CheckIsSlotAvailable' in url:
                        headers = request.get('headers', {})
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω—ã
                        if 'authorize' in headers:
                            authorize_token = headers['authorize']
                        
                        if 'clientsource' in headers:
                            clientsource_token = headers['clientsource']
                        
                        if 'cookie' in headers or 'Cookie' in headers:
                            cookies_str = headers.get('cookie') or headers.get('Cookie')
                        
                        if authorize_token and clientsource_token:
                            break
            except:
                continue
        
        print()
        print("=" * 70)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        print("=" * 70)
        
        if authorize_token:
            print(f"‚úÖ AUTHORIZE –Ω–∞–π–¥–µ–Ω ({len(authorize_token)} —Å–∏–º–≤–æ–ª–æ–≤)")
        else:
            print("‚ùå AUTHORIZE –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if clientsource_token:
            print(f"‚úÖ CLIENTSOURCE –Ω–∞–π–¥–µ–Ω ({len(clientsource_token)} —Å–∏–º–≤–æ–ª–æ–≤)")
        else:
            print("‚ùå CLIENTSOURCE –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if cookies_str:
            print(f"‚úÖ COOKIES –Ω–∞–π–¥–µ–Ω—ã ({len(cookies_str)} —Å–∏–º–≤–æ–ª–æ–≤)")
        else:
            print("‚ùå COOKIES –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        if authorize_token and clientsource_token and cookies_str:
            print()
            print("=" * 70)
            print("üíæ –û–ë–ù–û–í–õ–Ø–Æ .ENV –§–ê–ô–õ")
            print("=" * 70)
            
            update_env_token('AUTHORIZE', authorize_token)
            update_env_token('CLIENTSOURCE', clientsource_token)
            update_env_token('COOKIES', cookies_str)
            
            print()
            print("üéâ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ .env!")
            print()
            print("–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:")
            print("  python main.py")
            return True
        else:
            print()
            print("‚ùå –ù–µ –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞–π–¥–µ–Ω—ã.")
            print()
            print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("- –ó–∞–ø—Ä–æ—Å –∫ CheckIsSlotAvailable –Ω–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω")
            print("- –ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –¥–æ–ª—å—à–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏")
            print("- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –µ—â–µ —Ä–∞–∑")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        if driver:
            print()
            input("üëâ –ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä... ")
            driver.quit()
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")

if __name__ == "__main__":
    extract_tokens()

