import os
import time
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import logging
from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import Select
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class VisaSlotCheckerSelenium:
    def __init__(self):
        self.url = "https://services.vfsglobal.by/"
        self.recipient_email = "gannibal231@gmail.com"
        
        # Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
        self.smtp_port = int(os.getenv('SMTP_PORT', '587'))
        self.sender_email = os.getenv('SENDER_EMAIL')
        self.sender_password = os.getenv('SENDER_PASSWORD')
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)
        self.check_interval = int(os.getenv('CHECK_INTERVAL', '300'))
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.visa_types = [
            {"code": "BLRVPL", "name": "Polish visa (–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è)"},
            {"code": "BLRVI", "name": "Visitor/Short-term visa"}
        ]
        
        # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –±—ã–ª–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        self.notification_sent = False
        
        # –ë—Ä–∞—É–∑–µ—Ä
        self.driver = None
    
    def init_browser(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±—Ä–∞—É–∑–µ—Ä Chrome"""
        try:
            chrome_options = Options()
            
            # –î–ª—è Railway –∏ headless —Ä–µ–∂–∏–º–∞
            if os.getenv('HEADLESS', 'true').lower() == 'true':
                chrome_options.add_argument('--headless')
                chrome_options.add_argument('--no-sandbox')
                chrome_options.add_argument('--disable-dev-shm-usage')
                chrome_options.add_argument('--disable-gpu')
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            chrome_options.add_argument('--window-size=1920,1080')
            chrome_options.add_argument('--disable-blink-features=AutomationControlled')
            chrome_options.add_argument('--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36')
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ Selenium
            chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
            chrome_options.add_experimental_option('useAutomationExtension', False)
            
            self.driver = webdriver.Chrome(options=chrome_options)
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {str(e)}")
            return False
    
    def check_slots(self, visa_type_code):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ Selenium"""
        try:
            logger.info(f"üåê –û—Ç–∫—Ä—ã–≤–∞—é —Å–∞–π—Ç {self.url}")
            self.driver.get(self.url)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            time.sleep(5)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º cookie popup –µ—Å–ª–∏ –µ—Å—Ç—å
            try:
                logger.info("üç™ –ó–∞–∫—Ä—ã–≤–∞—é cookie popup...")
                cookie_accept = WebDriverWait(self.driver, 5).until(
                    EC.element_to_be_clickable((By.ID, "onetrust-accept-btn-handler"))
                )
                cookie_accept.click()
                time.sleep(2)
                logger.info("‚úÖ Cookie popup –∑–∞–∫—Ä—ã—Ç")
            except:
                logger.info("‚ÑπÔ∏è  Cookie popup –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –±—ã–ª –∑–∞–∫—Ä—ã—Ç)")
                pass
            
            # –ò—â–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
            wait = WebDriverWait(self.driver, 20)
            
            # –í—ã–±–∏—Ä–∞–µ–º Country: Belarus
            logger.info("üìù –ó–∞–ø–æ–ª–Ω—è—é —Ñ–æ—Ä–º—É: Country = Belarus")
            try:
                country_select = wait.until(
                    EC.presence_of_element_located((By.ID, "mat-select-value-1"))
                )
                country_select.click()
                time.sleep(1)
                
                # –í—ã–±–∏—Ä–∞–µ–º Belarus
                belarus_option = wait.until(
                    EC.element_to_be_clickable((By.XPATH, "//span[contains(text(), 'Belarus')]"))
                )
                belarus_option.click()
                time.sleep(2)
            except Exception as e:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã: {e}")
            
            # –í—ã–±–∏—Ä–∞–µ–º Mission: Bulgaria
            logger.info("üìù –ó–∞–ø–æ–ª–Ω—è—é —Ñ–æ—Ä–º—É: Mission = Bulgaria")
            try:
                mission_select = self.driver.find_element(By.XPATH, "//mat-select[@formcontrolname='missionCode']")
                mission_select.click()
                time.sleep(1)
                
                bulgaria_option = wait.until(
                    EC.element_to_be_clickable((By.XPATH, "//span[contains(text(), 'Bulgaria')]"))
                )
                bulgaria_option.click()
                time.sleep(2)
            except Exception as e:
                logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –≤—ã–±–æ—Ä–æ–º –º–∏—Å—Å–∏–∏: {e}")
            
            # –í—ã–±–∏—Ä–∞–µ–º VAC: BLRVIT
            logger.info("üìù –ó–∞–ø–æ–ª–Ω—è—é —Ñ–æ—Ä–º—É: VAC = BLRVIT")
            try:
                vac_select = self.driver.find_element(By.XPATH, "//mat-select[@formcontrolname='vacCode']")
                vac_select.click()
                time.sleep(1)
                
                vac_option = wait.until(
                    EC.element_to_be_clickable((By.XPATH, "//span[contains(text(), 'VIT')]"))
                )
                vac_option.click()
                time.sleep(2)
            except Exception as e:
                logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –≤—ã–±–æ—Ä–æ–º VAC: {e}")
            
            # –í—ã–±–∏—Ä–∞–µ–º Visa Category
            logger.info(f"üìù –ó–∞–ø–æ–ª–Ω—è—é —Ñ–æ—Ä–º—É: Visa Category = {visa_type_code}")
            try:
                visa_select = self.driver.find_element(By.XPATH, "//mat-select[@formcontrolname='visaCategoryCode']")
                visa_select.click()
                time.sleep(1)
                
                # –ò—â–µ–º –Ω—É–∂–Ω—ã–π —Ç–∏–ø –≤–∏–∑—ã
                visa_option = wait.until(
                    EC.element_to_be_clickable((By.XPATH, f"//mat-option[contains(@id, '{visa_type_code}')]"))
                )
                visa_option.click()
                time.sleep(2)
            except Exception as e:
                logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –≤–∏–∑—ã: {e}")
            
            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É Continue/Check slots
            logger.info("üîç –ù–∞–∂–∏–º–∞—é –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ—Ç–æ–≤")
            try:
                continue_button = wait.until(
                    EC.element_to_be_clickable((By.XPATH, "//button[contains(@class, 'mat-flat-button')]"))
                )
                continue_button.click()
                time.sleep(5)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É: {e}")
                return False, None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            page_source = self.driver.page_source.lower()
            
            # –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–ª–æ—Ç–æ–≤
            if "no slots available" in page_source or "no appointments available" in page_source:
                logger.info("‚ùå –°–ª–æ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return False, None
            
            # –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
            if "available" in page_source and "slot" in page_source:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–∞—Ö
                try:
                    slot_info = self.driver.find_element(By.XPATH, "//*[contains(text(), 'slot') or contains(text(), 'available')]").text
                    logger.info(f"üéâ –ù–ê–ô–î–ï–ù –°–õ–û–¢! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {slot_info}")
                    return True, {"info": slot_info, "timestamp": datetime.now().isoformat()}
                except:
                    logger.info("üéâ –í–û–ó–ú–û–ñ–ù–û –ù–ê–ô–î–ï–ù –°–õ–û–¢! (–Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞)")
                    return True, {"info": "Slot possibly available", "timestamp": datetime.now().isoformat()}
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            try:
                screenshot_path = f"screenshot_{visa_type_code}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
                self.driver.save_screenshot(screenshot_path)
                logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {screenshot_path}")
            except:
                pass
            
            return False, None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ª–æ—Ç–æ–≤: {str(e)}")
            try:
                screenshot_path = f"error_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
                self.driver.save_screenshot(screenshot_path)
                logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏: {screenshot_path}")
            except:
                pass
            return False, None
    
    def send_email_notification(self, slot_data, visa_type):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–Ω–æ–º —Å–ª–æ—Ç–µ"""
        if not self.sender_email or not self.sender_password:
            logger.error("Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ SENDER_EMAIL –∏ SENDER_PASSWORD")
            return False
        
        try:
            msg = MIMEMultipart()
            msg['From'] = self.sender_email
            msg['To'] = self.recipient_email
            msg['Subject'] = 'üéâ –î–û–°–¢–£–ü–ï–ù –°–õ–û–¢ –î–õ–Ø –í–ò–ó–´!'
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–µ
            body = f"""
            <html>
            <body>
                <h2>–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –ü–æ—è–≤–∏–ª—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏!</h2>
                <p><strong>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</strong> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</p>
                <p><strong>–¢–∏–ø –≤–∏–∑—ã:</strong> {visa_type}</p>
                
                <h3>–î–µ—Ç–∞–ª–∏:</h3>
                <pre>{json.dumps(slot_data, indent=2, ensure_ascii=False)}</pre>
                
                <p style="color: red; font-weight: bold; font-size: 18px;">
                    ‚ö° –ë–´–°–¢–†–ï–ï –ü–ï–†–ï–•–û–î–ò–¢–ï –ù–ê –°–ê–ô–¢ –ò –ó–ê–ü–ò–°–´–í–ê–ô–¢–ï–°–¨! ‚ö°
                </p>
                <p><a href="https://services.vfsglobal.by/" style="background-color: #4CAF50; color: white; padding: 15px 32px; text-decoration: none; display: inline-block; font-size: 16px;">–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ø–∏—Å–∏</a></p>
            </body>
            </html>
            """
            
            msg.attach(MIMEText(body, 'html'))
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ email
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.sender_email, self.sender_password)
                server.send_message(msg)
            
            logger.info(f"‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {self.recipient_email}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {str(e)}")
            return False
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        logger.info("=" * 70)
        logger.info("ü§ñ –ë–û–¢ –ó–ê–ü–£–©–ï–ù (–í–ï–†–°–ò–Ø –° SELENIUM)")
        logger.info("=" * 70)
        logger.info(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval} —Å–µ–∫—É–Ω–¥")
        logger.info(f"Email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {self.recipient_email}")
        
        if not self.sender_email or not self.sender_password:
            logger.warning("‚ö†Ô∏è Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è!")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä –æ–¥–∏–Ω —Ä–∞–∑
        if not self.init_browser():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä. –í—ã—Ö–æ–¥.")
            return
        
        try:
            while True:
                try:
                    current_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
                    logger.info(f"\n{'='*70}")
                    logger.info(f"üîç –ü–†–û–í–ï–†–ö–ê –°–õ–û–¢–û–í... [{current_time}]")
                    logger.info(f"{'='*70}")
                    
                    slot_found = False
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ —Ç–∏–ø–∞ –≤–∏–∑
                    for visa_type in self.visa_types:
                        logger.info(f"\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞: {visa_type['name']} ({visa_type['code']})")
                        
                        is_available, slot_data = self.check_slots(visa_type['code'])
                        
                        if is_available:
                            slot_found = True
                            logger.info(f"üéâ –ù–ê–ô–î–ï–ù –°–õ–û–¢ –¥–ª—è {visa_type['name']}!")
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                            if not self.notification_sent:
                                self.send_email_notification(slot_data, visa_type['name'])
                                self.notification_sent = True
                                logger.info("üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É...")
                            else:
                                logger.info("üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ")
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                        time.sleep(3)
                    
                    if not slot_found:
                        logger.info("\n‚ùå –°–ª–æ—Ç—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, –µ—Å–ª–∏ —Å–ª–æ—Ç—ã —Å–Ω–æ–≤–∞ —Å—Ç–∞–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
                        self.notification_sent = False
                    
                    logger.info(f"\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {self.check_interval} —Å–µ–∫—É–Ω–¥")
                    logger.info(f"{'='*70}\n")
                    
                    time.sleep(self.check_interval)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {str(e)}")
                    logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±—Ä–∞—É–∑–µ—Ä...")
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –±—Ä–∞—É–∑–µ—Ä
                    try:
                        if self.driver:
                            self.driver.quit()
                    except:
                        pass
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
                    time.sleep(5)
                    if not self.init_browser():
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä. –ñ–¥—É 60 —Å–µ–∫—É–Ω–¥...")
                        time.sleep(60)
                    
        except KeyboardInterrupt:
            logger.info("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            try:
                if self.driver:
                    self.driver.quit()
                    logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            except:
                pass

if __name__ == "__main__":
    checker = VisaSlotCheckerSelenium()
    checker.run()

