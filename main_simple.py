import os
import time
import requests
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class SimpleVisaChecker:
    def __init__(self):
        self.api_url = "https://lift-api.vfsglobal.by/appointment/CheckIsSlotAvailable"
        self.recipient_email = "gannibal231@gmail.com"
        
        # Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
        self.smtp_port = int(os.getenv('SMTP_PORT', '587'))
        self.sender_email = os.getenv('SENDER_EMAIL')
        self.sender_password = os.getenv('SENDER_PASSWORD')
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.check_interval = int(os.getenv('CHECK_INTERVAL', '180'))
        
        # –¢–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.authorize = os.getenv('AUTHORIZE', '')
        self.clientsource = os.getenv('CLIENTSOURCE', '')
        self.cookies = os.getenv('COOKIES', '')
        self.route = os.getenv('ROUTE', 'blr/en/bgr')
        
        # Session
        self.session = requests.Session()
        
        self.payloads = [
            {
                "countryCode": "blr",
                "loginUser": "Gannibal231@gmail.com",
                "missionCode": "bgr",
                "payCode": "",
                "roleName": "Individual",
                "vacCode": "BLRVIT",
                "visaCategoryCode": "BLRVPL"
            },
            {
                "countryCode": "blr",
                "loginUser": "Gannibal231@gmail.com",
                "missionCode": "bgr",
                "payCode": "",
                "roleName": "Individual",
                "vacCode": "BLRVIT",
                "visaCategoryCode": "BLRVI"
            }
        ]
        
        self.notification_sent = False
    
    def check_slots(self, payload):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ª–æ—Ç—ã"""
        try:
            headers = {
                'Content-Type': 'application/json;charset=UTF-8',
                'Accept': 'application/json, text/plain, */*',
                'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
                'Origin': 'https://services.vfsglobal.by',
                'Referer': 'https://services.vfsglobal.by/',
                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
                'Cache-Control': 'no-cache',
                'Pragma': 'no-cache'
            }
            
            if self.authorize:
                headers['authorize'] = self.authorize
            if self.clientsource:
                headers['clientsource'] = self.clientsource
            if self.route:
                headers['route'] = self.route
            if self.cookies:
                headers['Cookie'] = self.cookies
            
            response = self.session.post(
                self.api_url,
                json=payload,
                headers=headers,
                timeout=30
            )
            
            logger.info(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 401 or response.status_code == 403:
                logger.warning(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–ª–∏! –û–±–Ω–æ–≤–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ Railway Variables")
                logger.warning(f"   1. –õ–æ–∫–∞–ª—å–Ω–æ: python get_tokens_auto.py")
                logger.warning(f"   2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ AUTHORIZE, CLIENTSOURCE, COOKIES")
                logger.warning(f"   3. –û–±–Ω–æ–≤–∏—Ç–µ –≤ Railway Dashboard ‚Üí Variables")
                return False, None
            
            if response.status_code == 200:
                data = response.json()
                
                if 'error' in data and data['error'].get('code') == 1035:
                    logger.info("‚ùå –°–ª–æ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                    return False, None
                
                if data.get('earliestDate') or (data.get('earliestSlotLists') and len(data['earliestSlotLists']) > 0):
                    logger.info(f"üéâ –°–õ–û–¢ –ù–ê–ô–î–ï–ù! {data}")
                    return True, data
                
                if 'error' not in data or data['error'].get('code') != 1035:
                    logger.info(f"üéâ –í–æ–∑–º–æ–∂–Ω–æ —Å–ª–æ—Ç –Ω–∞–π–¥–µ–Ω! {data}")
                    return True, data
            
            return False, None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False, None
    
    def send_email(self, slot_data, visa_type):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email"""
        if not self.sender_email or not self.sender_password:
            logger.error("Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return False
        
        try:
            msg = MIMEMultipart()
            msg['From'] = self.sender_email
            msg['To'] = self.recipient_email
            msg['Subject'] = 'üéâ –î–û–°–¢–£–ü–ï–ù –°–õ–û–¢ –î–õ–Ø –í–ò–ó–´!'
            
            body = f"""
            <html><body>
                <h2>–ù–∞–π–¥–µ–Ω —Å–ª–æ—Ç!</h2>
                <p><strong>–í—Ä–µ–º—è:</strong> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</p>
                <p><strong>–í–∏–∑–∞:</strong> {visa_type}</p>
                <p style="color: red; font-size: 20px;"><strong>–ë–´–°–¢–†–ï–ï –ó–ê–ü–ò–°–´–í–ê–ô–¢–ï–°–¨!</strong></p>
                <p><a href="https://services.vfsglobal.by/">–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ø–∏—Å–∏</a></p>
            </body></html>
            """
            
            msg.attach(MIMEText(body, 'html'))
            
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.sender_email, self.sender_password)
                server.send_message(msg)
            
            logger.info(f"‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            return True
        except Exception as e:
            logger.error(f"‚ùå Email error: {e}")
            return False
    
    def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª"""
        logger.info("=" * 70)
        logger.info("ü§ñ VISA SLOT CHECKER - –ü–†–û–°–¢–ê–Ø –í–ï–†–°–ò–Ø")
        logger.info("=" * 70)
        logger.info(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.check_interval} —Å–µ–∫")
        logger.info(f"Email: {self.recipient_email}")
        
        if not self.authorize or not self.clientsource:
            logger.warning("‚ö†Ô∏è –¢–û–ö–ï–ù–´ –ù–ï –ó–ê–î–ê–ù–´!")
            logger.warning("   –î–æ–±–∞–≤—å—Ç–µ –≤ Railway Variables:")
            logger.warning("   - AUTHORIZE")
            logger.warning("   - CLIENTSOURCE")
            logger.warning("   - COOKIES")
        
        logger.info("")
        
        while True:
            try:
                current_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
                logger.info(f"\n{'='*70}")
                logger.info(f"üîç –ü–†–û–í–ï–†–ö–ê [{current_time}]")
                logger.info(f"{'='*70}\n")
                
                slot_found = False
                
                for i, payload in enumerate(self.payloads, 1):
                    visa_type = payload['visaCategoryCode']
                    logger.info(f"üìã {i}. {visa_type}")
                    
                    is_available, data = self.check_slots(payload)
                    
                    if is_available:
                        slot_found = True
                        logger.info(f"üéâ –°–õ–û–¢!")
                        
                        if not self.notification_sent:
                            self.send_email(data, visa_type)
                            self.notification_sent = True
                    
                    time.sleep(2)
                
                if not slot_found:
                    logger.info("\n‚ùå –°–ª–æ—Ç–æ–≤ –Ω–µ—Ç")
                    self.notification_sent = False
                
                logger.info(f"\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {self.check_interval} —Å–µ–∫")
                logger.info(f"{'='*70}\n")
                
                time.sleep(self.check_interval)
                
            except KeyboardInterrupt:
                logger.info("\nüõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                time.sleep(60)

if __name__ == "__main__":
    checker = SimpleVisaChecker()
    checker.run()

