import os
import time
import requests
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import logging
from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AutoTokenVisaChecker:
    def __init__(self):
        self.api_url = "https://lift-api.vfsglobal.by/appointment/CheckIsSlotAvailable"
        self.site_url = "https://services.vfsglobal.by/"
        self.recipient_email = "gannibal231@gmail.com"
        
        # Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
        self.smtp_port = int(os.getenv('SMTP_PORT', '587'))
        self.sender_email = os.getenv('SENDER_EMAIL')
        self.sender_password = os.getenv('SENDER_PASSWORD')
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (180 —Å–µ–∫ = 3 –º–∏–Ω—É—Ç—ã, —á—Ç–æ–±—ã —Ç–æ–∫–µ–Ω—ã –Ω–µ –∏—Å—Ç–µ–∫–∞–ª–∏)
        self.check_interval = int(os.getenv('CHECK_INTERVAL', '180'))
        
        # –¢–æ–∫–µ–Ω—ã (–±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        self.authorize = ''
        self.clientsource = ''
        self.cookies = ''
        self.route = 'blr/en/bgr'
        
        # Session –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
        self.session = requests.Session()
        
        # –í–∞—Ä–∏–∞–Ω—Ç—ã –≤–∏–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.visa_configs = [
            {"code": "BLRVPL", "name": "Polish visa (–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è)"},
            {"code": "BLRVI", "name": "Visitor/Short-term visa"}
        ]
        
        self.payloads = [
            {
                "countryCode": "blr",
                "loginUser": "Gannibal231@gmail.com",
                "missionCode": "bgr",
                "payCode": "",
                "roleName": "Individual",
                "vacCode": "BLRVIT",
                "visaCategoryCode": "BLRVPL"
            },
            {
                "countryCode": "blr",
                "loginUser": "Gannibal231@gmail.com",
                "missionCode": "bgr",
                "payCode": "",
                "roleName": "Individual",
                "vacCode": "BLRVIT",
                "visaCategoryCode": "BLRVI"
            }
        ]
        
        self.notification_sent = False
        self.driver = None
    
    def init_browser(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç headless –±—Ä–∞—É–∑–µ—Ä Chrome"""
        try:
            chrome_options = Options()
            chrome_options.add_argument('--headless')
            chrome_options.add_argument('--no-sandbox')
            chrome_options.add_argument('--disable-dev-shm-usage')
            chrome_options.add_argument('--disable-gpu')
            chrome_options.add_argument('--window-size=1920,1080')
            chrome_options.add_argument('--disable-blink-features=AutomationControlled')
            chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
            chrome_options.add_experimental_option('useAutomationExtension', False)
            
            # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Network –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤
            chrome_options.set_capability('goog:loggingPrefs', {'performance': 'ALL'})
            
            self.driver = webdriver.Chrome(options=chrome_options)
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False
    
    def refresh_tokens_via_browser(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä - –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
        try:
            logger.info("üîÑ –û–±–Ω–æ–≤–ª—è—é —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä...")
            
            # –í–°–ï–ì–î–ê –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —Å–≤–µ–∂–µ–π —Å–µ—Å—Å–∏–∏
            if self.driver:
                try:
                    self.driver.quit()
                except:
                    pass
                self.driver = None
            
            if not self.init_browser():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä")
                return False
            
            logger.info("üåê –û—Ç–∫—Ä—ã–≤–∞—é —Å–∞–π—Ç...")
            self.driver.get(self.site_url)
            time.sleep(4)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º cookie popup
            try:
                cookie_btn = WebDriverWait(self.driver, 3).until(
                    EC.element_to_be_clickable((By.ID, "onetrust-accept-btn-handler"))
                )
                cookie_btn.click()
                logger.info("‚úÖ Cookie popup –∑–∞–∫—Ä—ã—Ç")
                time.sleep(1)
            except:
                logger.info("Cookie popup –Ω–µ –Ω–∞–π–¥–µ–Ω")
                pass
            
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ —á–µ—Ä–µ–∑ JavaScript
            logger.info("üì° –î–µ–ª–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ API —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä...")
            
            # –î–µ–ª–∞–µ–º fetch –∑–∞–ø—Ä–æ—Å –∫ API –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            test_script = """
            return fetch('https://lift-api.vfsglobal.by/appointment/CheckIsSlotAvailable', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    "countryCode": "blr",
                    "loginUser": "Gannibal231@gmail.com",
                    "missionCode": "bgr",
                    "payCode": "",
                    "roleName": "Individual",
                    "vacCode": "BLRVIT",
                    "visaCategoryCode": "BLRVPL"
                })
            }).then(r => r.text()).then(text => text);
            """
            
            try:
                result = self.driver.execute_async_script("""
                    var callback = arguments[arguments.length - 1];
                    """ + test_script.replace('return ', '') + """.then(callback);
                """)
                logger.info(f"–û—Ç–≤–µ—Ç API: {result[:200]}...")
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å fetch: {e}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ Performance logs
            logger.info("üîç –ò—â—É —Ç–æ–∫–µ–Ω—ã –≤ –ª–æ–≥–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞...")
            
            logs = self.driver.get_log('performance')
            tokens_found = False
            
            for entry in logs:
                try:
                    log = json.loads(entry['message'])
                    message = log.get('message', {})
                    
                    if message.get('method') == 'Network.requestWillBeSent':
                        params = message.get('params', {})
                        request = params.get('request', {})
                        url = request.get('url', '')
                        
                        if 'lift-api.vfsglobal.by' in url:
                            headers = request.get('headers', {})
                            
                            if 'authorize' in headers:
                                self.authorize = headers['authorize']
                                logger.info(f"‚úÖ authorize: {len(self.authorize)} —Å–∏–º–≤–æ–ª–æ–≤")
                                tokens_found = True
                            
                            if 'clientsource' in headers:
                                self.clientsource = headers['clientsource']
                                logger.info(f"‚úÖ clientsource: {len(self.clientsource)} —Å–∏–º–≤–æ–ª–æ–≤")
                                tokens_found = True
                            
                            if 'cookie' in headers or 'Cookie' in headers:
                                self.cookies = headers.get('cookie') or headers.get('Cookie')
                                logger.info(f"‚úÖ cookies: {len(self.cookies)} —Å–∏–º–≤–æ–ª–æ–≤")
                                tokens_found = True
                except:
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ª–æ–≥–∞—Ö, –±–µ—Ä–µ–º cookies –∏–∑ session
            if not tokens_found or not self.cookies:
                logger.info("üç™ –ü–æ–ª—É—á–∞—é cookies –∏–∑ session...")
                cookies_list = []
                for cookie in self.driver.get_cookies():
                    cookies_list.append(f"{cookie['name']}={cookie['value']}")
                self.cookies = "; ".join(cookies_list)
                logger.info(f"‚úÖ Cookies: {len(self.cookies)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            try:
                self.driver.quit()
                self.driver = None
            except:
                pass
            
            # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã cookies –µ—Å—Ç—å
            if self.cookies or self.authorize:
                logger.info("‚úÖ –¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
                return True
            
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: {e}")
            return False
    
    def check_slots(self, payload):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ª–æ—Ç—ã —á–µ—Ä–µ–∑ API"""
        try:
            headers = {
                'Content-Type': 'application/json;charset=UTF-8',
                'Accept': 'application/json, text/plain, */*',
                'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
                'Origin': 'https://services.vfsglobal.by',
                'Referer': 'https://services.vfsglobal.by/',
                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
            }
            
            if self.authorize:
                headers['authorize'] = self.authorize
            if self.clientsource:
                headers['clientsource'] = self.clientsource
            if self.route:
                headers['route'] = self.route
            if self.cookies:
                headers['Cookie'] = self.cookies
            
            response = self.session.post(
                self.api_url,
                json=payload,
                headers=headers,
                timeout=30
            )
            
            logger.info(f"–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 401 or response.status_code == 403:
                logger.warning("‚ö†Ô∏è –¢–æ–∫–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–ª–∏")
                return None, 'AUTH_REQUIRED'
            
            if response.status_code == 200:
                data = response.json()
                
                if 'error' in data and data['error'].get('code') == 1035:
                    return False, None
                
                if data.get('earliestDate') or (data.get('earliestSlotLists') and len(data['earliestSlotLists']) > 0):
                    return True, data
                
                if 'error' not in data or data['error'].get('code') != 1035:
                    return True, data
            
            return False, None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return False, None
    
    def send_email_notification(self, slot_data, visa_type):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        if not self.sender_email or not self.sender_password:
            logger.error("Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã!")
            return False
        
        try:
            msg = MIMEMultipart()
            msg['From'] = self.sender_email
            msg['To'] = self.recipient_email
            msg['Subject'] = 'üéâ –î–û–°–¢–£–ü–ï–ù –°–õ–û–¢ –î–õ–Ø –í–ò–ó–´!'
            
            body = f"""
            <html>
            <body>
                <h2>–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –ü–æ—è–≤–∏–ª—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç!</h2>
                <p><strong>–í—Ä–µ–º—è:</strong> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</p>
                <p><strong>–¢–∏–ø –≤–∏–∑—ã:</strong> {visa_type}</p>
                <h3>–î–µ—Ç–∞–ª–∏:</h3>
                <pre>{json.dumps(slot_data, indent=2, ensure_ascii=False)}</pre>
                <p style="color: red; font-weight: bold; font-size: 18px;">
                    ‚ö° –ë–´–°–¢–†–ï–ï –ü–ï–†–ï–•–û–î–ò–¢–ï –ò –ó–ê–ü–ò–°–´–í–ê–ô–¢–ï–°–¨! ‚ö°
                </p>
                <p><a href="https://services.vfsglobal.by/">–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ø–∏—Å–∏</a></p>
            </body>
            </html>
            """
            
            msg.attach(MIMEText(body, 'html'))
            
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.sender_email, self.sender_password)
                server.send_message(msg)
            
            logger.info(f"‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {self.recipient_email}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
            return False
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–æ–≤"""
        logger.info("=" * 70)
        logger.info("ü§ñ –ë–û–¢ –° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ú –û–ë–ù–û–í–õ–ï–ù–ò–ï–ú –¢–û–ö–ï–ù–û–í")
        logger.info("=" * 70)
        logger.info(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval} —Å–µ–∫")
        logger.info(f"Email: {self.recipient_email}")
        
        try:
            while True:
                current_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
                logger.info(f"\n{'='*70}")
                logger.info(f"üîç –ü–†–û–í–ï–†–ö–ê –°–õ–û–¢–û–í [{current_time}]")
                logger.info(f"{'='*70}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –ü–†–Ø–ú–û –ü–ï–†–ï–î –ø—Ä–æ–≤–µ—Ä–∫–æ–π (—Ç–æ–∫–µ–Ω—ã –∂–∏–≤—É—Ç 4 –º–∏–Ω—É—Ç—ã!)
                logger.info("")
                if not self.refresh_tokens_via_browser():
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã, –ø—Ä–æ–±—É—é —Å —Ç–µ–∫—É—â–∏–º–∏...")
                
                logger.info("")
                slot_found = False
                
                for i, payload in enumerate(self.payloads, 1):
                    visa_type = payload['visaCategoryCode']
                    logger.info(f"\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ {i}: {visa_type}")
                    
                    is_available, slot_data = self.check_slots(payload)
                    
                    if is_available:
                        slot_found = True
                        logger.info(f"üéâ –ù–ê–ô–î–ï–ù –°–õ–û–¢ –¥–ª—è {visa_type}!")
                        
                        if not self.notification_sent:
                            self.send_email_notification(slot_data, visa_type)
                            self.notification_sent = True
                        else:
                            logger.info("üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    
                    time.sleep(2)
                
                if not slot_found:
                    logger.info("\n‚ùå –°–ª–æ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                    self.notification_sent = False
                
                logger.info(f"\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {self.check_interval} —Å–µ–∫")
                logger.info(f"{'='*70}\n")
                
                time.sleep(self.check_interval)
                
        except KeyboardInterrupt:
            logger.info("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        finally:
            if self.driver:
                self.driver.quit()
                logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")

if __name__ == "__main__":
    checker = AutoTokenVisaChecker()
    checker.run()

